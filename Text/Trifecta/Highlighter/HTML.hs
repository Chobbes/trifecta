{-# LANGUAGE OverloadedStrings #-}
module Text.Trifecta.Highlighter.HTML 
  ( HighlightedRope(..)
  , Doc(..)
  ) where


import qualified Data.ByteString.Lazy.Char8 as L
import Data.Foldable as F
import Data.Int (Int64)
import Data.IntervalMap.FingerTree as IM
import Data.Key hiding ((!))
import Data.Monoid
import Data.List (sort)
import Prelude hiding (head)
import Text.Blaze
import Text.Blaze.Internal
import Text.Blaze.Html5 hiding (b,i)
import Text.Blaze.Html5.Attributes hiding (title)
import Text.Trifecta.Rope.Delta
import Text.Trifecta.Rope.Bytes
import Text.Trifecta.Rope.Prim
import Text.Trifecta.Parser.Token.Highlight

data Located a = a :@ {-# UNPACK #-} !Int64

infix 5 :@

instance Eq (Located a) where
  _ :@ m == _ :@ n = m == n

instance Ord (Located a) where
  compare (_ :@ m) (_ :@ n) = compare m n

data HighlightedRope = HighlightedRope 
  { ropeHighlights :: !(IntervalMap Delta TokenHighlight)
  , ropeContent    :: !Rope 
  }

instance ToHtml HighlightedRope where
  toHtml (HighlightedRope intervals r) = pre $ go 0 lbs effects where 
    lbs = L.fromChunks [bs | Strand bs _ <- F.toList (strands r)]
    line no = a ! name (toValue $ "line-" ++ show no) $ Empty
    effects = sort $ [ i | (Interval lo hi, tok) <- intersections (Interval mempty (delta r)) intervals
                     , i <- [ (Leaf "span" "<span" ">" ! class_ (toValue $ show tok)) :@ bytes lo
                            , preEscapedString "</span>" :@ bytes hi
                            ]
                     ] ++ mapWithKey (\k i -> line k :@ i) (L.elemIndices '\n' lbs)
    go _ cs [] = unsafeLazyByteString cs
    go b cs ((eff :@ eb) : es) 
      | eb <= b = eff >> go b cs es 
      | otherwise = unsafeLazyByteString om >> go eb nom es
         where (om,nom) = L.splitAt (fromIntegral (eb - b)) cs
      
-- | Represents a source file like an HsColour rendered document
data Doc = Doc 
  { docTitle   :: String
  , docCss     :: String -- href for the css file
  , docContent :: HighlightedRope
  }

instance ToHtml Doc where
  toHtml (Doc t css cs) = docTypeHtml $ do
    head $ do
      preEscapedString "<!-- Generated by trifecta, http://github.com/ekmett/trifecta/ -->"
      title $ toHtml t
      link ! rel "stylesheet" ! type_ "text/css" ! href (toValue css)
    body $ toHtml cs
